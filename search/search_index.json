{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Fli Documentation","text":"<p>Fli is a powerful Python library that provides direct access to Google Flights' API through reverse engineering. Unlike other flight search libraries that rely on web scraping, Fli offers a clean, fast, and reliable way to search for flights and analyze pricing data.</p>"},{"location":"#key-features","title":"Key Features","text":""},{"location":"#direct-api-access","title":"\ud83d\ude80 Direct API Access","text":"<ul> <li>No web scraping or browser automation</li> <li>Fast and reliable results</li> <li>Less prone to breaking from UI changes</li> <li>Clean, modular architecture</li> </ul>"},{"location":"#search-capabilities","title":"\ud83d\udd0d Search Capabilities","text":"<ul> <li>One-way flight searches</li> <li>Flexible departure times</li> <li>Multi-airline support</li> <li>Various cabin classes</li> <li>Stop preferences</li> <li>Custom result sorting</li> </ul>"},{"location":"#price-analysis","title":"\ud83d\udcb0 Price Analysis","text":"<ul> <li>Search across date ranges</li> <li>Find cheapest dates to fly</li> <li>Price tracking and analysis</li> <li>Flexible date options</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code># Install using pip\npip install flights\n\n# Or install using pipx (recommended for CLI usage)\npipx install flights\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>from datetime import datetime, timedelta\nfrom fli.models import Airport, PassengerInfo, SeatType, MaxStops, SortBy\nfrom fli.search import SearchFlights, SearchFlightsFilters\n\n# Create search filters\nfilters = SearchFlightsFilters(\n    departure_airport=Airport.JFK,\n    arrival_airport=Airport.LAX,\n    departure_date=(datetime.now() + timedelta(days=30)).strftime(\"%Y-%m-%d\"),\n    passenger_info=PassengerInfo(adults=1),\n    seat_type=SeatType.ECONOMY,\n    stops=MaxStops.NON_STOP,\n    sort_by=SortBy.CHEAPEST,\n)\n\n# Search flights\nsearch = SearchFlights()\nflights = search.search(filters)\n\n# Process results\nfor flight in flights:\n    print(f\"\ud83d\udcb0 Price: ${flight.price}\")\n    print(f\"\u23f1\ufe0f Duration: {flight.duration} minutes\")\n    print(f\"\u2708\ufe0f Stops: {flight.stops}\")\n</code></pre>"},{"location":"#project-structure","title":"Project Structure","text":"<p>The library is organized into several key modules:</p> <ul> <li> <p><code>models/</code>: Data models and enums</p> <ul> <li><code>google_flights.py</code>: Core data models</li> <li><code>airline.py</code>: Airline enums and data</li> <li><code>airport.py</code>: Airport enums and data</li> </ul> </li> <li> <p><code>search/</code>: Search functionality</p> <ul> <li><code>flights.py</code>: Flight search implementation</li> <li><code>dates.py</code>: Date-based price search</li> <li><code>client.py</code>: HTTP client with rate limiting</li> </ul> </li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Here's how you can help:</p> <ol> <li>Fork the repository</li> <li>Create a feature branch</li> <li>Make your changes</li> <li>Run tests: <code>poetry run pytest</code></li> <li>Submit a pull request</li> </ol>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License. See the LICENSE file for details. </p>"},{"location":"api/models/","title":"Models Reference","text":""},{"location":"api/models/#core-models","title":"Core Models","text":""},{"location":"api/models/#flightsearchfilters","title":"FlightSearchFilters","text":"<p>The main model for configuring flight searches.</p> <pre><code>from fli.models import FlightSearchFilters, SeatType, MaxStops, SortBy\n\nfilters = FlightSearchFilters(\n    trip_type=TripType.ONE_WAY,\n    passenger_info=PassengerInfo(adults=1),\n    flight_segments=[...],\n    stops=MaxStops.NON_STOP,\n    seat_type=SeatType.ECONOMY,\n    sort_by=SortBy.CHEAPEST\n)\n</code></pre>"},{"location":"api/models/#fli.models.google_flights.FlightSearchFilters","title":"<code>fli.models.google_flights.FlightSearchFilters</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Complete set of filters for flight search.</p> <p>This model matches required Google Flights' API structure.</p>"},{"location":"api/models/#fli.models.google_flights.FlightSearchFilters.airlines","title":"<code>airlines: list[Airline] | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.FlightSearchFilters.flight_segments","title":"<code>flight_segments: list[FlightSegment]</code>  <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.FlightSearchFilters.layover_restrictions","title":"<code>layover_restrictions: LayoverRestrictions | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.FlightSearchFilters.max_duration","title":"<code>max_duration: PositiveInt | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.FlightSearchFilters.passenger_info","title":"<code>passenger_info: PassengerInfo</code>  <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.FlightSearchFilters.price_limit","title":"<code>price_limit: PriceLimit | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.FlightSearchFilters.seat_type","title":"<code>seat_type: SeatType = SeatType.ECONOMY</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.FlightSearchFilters.sort_by","title":"<code>sort_by: SortBy = SortBy.NONE</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.FlightSearchFilters.stops","title":"<code>stops: MaxStops = MaxStops.ANY</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.FlightSearchFilters.trip_type","title":"<code>trip_type: TripType = TripType.ONE_WAY</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.FlightSearchFilters.encode","title":"<code>encode() -&gt; str</code>","text":"<p>URL encode the formatted filters for API request.</p> Source code in <code>fli/models/google_flights.py</code> <pre><code>def encode(self) -&gt; str:\n    \"\"\"URL encode the formatted filters for API request.\"\"\"\n    formatted_filters = self.format()\n    # First convert the formatted filters to a JSON string\n    formatted_json = json.dumps(formatted_filters, separators=(\",\", \":\"))\n    # Then wrap it in a list with null\n    wrapped_filters = [None, formatted_json]\n    # Finally, encode the whole thing\n    return urllib.parse.quote(json.dumps(wrapped_filters, separators=(\",\", \":\")))\n</code></pre>"},{"location":"api/models/#fli.models.google_flights.FlightSearchFilters.format","title":"<code>format() -&gt; list</code>","text":"<p>Format filters into Google Flights API structure.</p> <p>This method converts the FlightSearchFilters model into the specific nested list/dict structure required by Google Flights' API.</p> <p>The output format matches Google Flights' internal API structure, with careful handling of nested arrays and proper serialization of enums and model objects.</p> RETURNS DESCRIPTION <code>list</code> <p>A formatted list structure ready for the Google Flights API request</p> <p> TYPE: <code>list</code> </p> Source code in <code>fli/models/google_flights.py</code> <pre><code>def format(self) -&gt; list:\n    \"\"\"Format filters into Google Flights API structure.\n\n    This method converts the FlightSearchFilters model into the specific nested list/dict\n    structure required by Google Flights' API.\n\n    The output format matches Google Flights' internal API structure, with careful handling\n    of nested arrays and proper serialization of enums and model objects.\n\n    Returns:\n        list: A formatted list structure ready for the Google Flights API request\n\n    \"\"\"\n\n    def serialize(obj):\n        if isinstance(obj, Airport) or isinstance(obj, Airline):\n            return obj.name\n        if isinstance(obj, Enum):\n            return obj.value\n        if isinstance(obj, list):\n            return [serialize(item) for item in obj]\n        if isinstance(obj, dict):\n            return {key: serialize(value) for key, value in obj.items()}\n        if isinstance(obj, BaseModel):\n            return serialize(obj.dict(exclude_none=True))\n        return obj\n\n    # Format flight segments\n    formatted_segments = []\n    for segment in self.flight_segments:\n        # Format airport codes with correct nesting\n        segment_filters = [\n            [\n                [\n                    [serialize(airport[0]), serialize(airport[1])]\n                    for airport in segment.departure_airport\n                ]\n            ],\n            [\n                [\n                    [serialize(airport[0]), serialize(airport[1])]\n                    for airport in segment.arrival_airport\n                ]\n            ],\n        ]\n\n        # Time restrictions\n        if segment.time_restrictions:\n            time_filters = [\n                segment.time_restrictions.earliest_departure,\n                segment.time_restrictions.latest_departure,\n                segment.time_restrictions.earliest_arrival,\n                segment.time_restrictions.latest_arrival,\n            ]\n        else:\n            time_filters = None\n\n        # Airlines\n        airlines_filters = None\n        if self.airlines:\n            sorted_airlines = sorted(self.airlines, key=lambda x: x.value)\n            airlines_filters = [serialize(airline) for airline in sorted_airlines]\n\n        # Layover restrictions\n        layover_airports = (\n            [serialize(a) for a in self.layover_restrictions.airports]\n            if self.layover_restrictions and self.layover_restrictions.airports\n            else None\n        )\n        layover_duration = (\n            self.layover_restrictions.max_duration if self.layover_restrictions else None\n        )\n\n        segment_formatted = [\n            segment_filters[0],  # departure airport\n            segment_filters[1],  # arrival airport\n            time_filters,  # time restrictions\n            serialize(self.stops.value),  # stops\n            airlines_filters,  # airlines\n            None,  # placeholder\n            segment.travel_date,  # travel date\n            [self.max_duration] if self.max_duration else None,  # max duration\n            None,  # placeholder\n            layover_airports,  # layover airports\n            None,  # placeholder\n            None,  # placeholder\n            layover_duration,  # layover duration\n            None,  # emissions\n            3,  # constant value\n        ]\n        formatted_segments.append(segment_formatted)\n\n    # Create the main filters structure\n    filters = [\n        [],  # empty array at start\n        [\n            None,  # placeholder\n            None,  # placeholder\n            serialize(self.trip_type.value),\n            None,  # placeholder\n            [],  # empty array\n            serialize(self.seat_type.value),\n            [\n                self.passenger_info.adults,\n                self.passenger_info.children,\n                self.passenger_info.infants_on_lap,\n                self.passenger_info.infants_in_seat,\n            ],\n            [None, self.price_limit.max_price] if self.price_limit else None,\n            None,  # placeholder\n            None,  # placeholder\n            None,  # placeholder\n            None,  # placeholder\n            None,  # placeholder\n            formatted_segments,\n            None,  # placeholder\n            None,  # placeholder\n            None,  # placeholder\n            1,  # placeholder (hardcoded to 1)\n        ],\n        serialize(self.sort_by.value),\n        0,  # constant\n        0,  # constant\n        2,  # constant\n    ]\n\n    return filters\n</code></pre>"},{"location":"api/models/#flightresult","title":"FlightResult","text":"<p>Represents a flight search result with complete details.</p>"},{"location":"api/models/#fli.models.google_flights.FlightResult","title":"<code>fli.models.google_flights.FlightResult</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Complete flight search result with pricing and timing.</p>"},{"location":"api/models/#fli.models.google_flights.FlightResult.duration","title":"<code>duration: PositiveInt</code>  <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.FlightResult.legs","title":"<code>legs: list[FlightLeg]</code>  <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.FlightResult.price","title":"<code>price: NonNegativeFloat</code>  <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.FlightResult.stops","title":"<code>stops: NonNegativeInt</code>  <code>instance-attribute</code>","text":""},{"location":"api/models/#flightleg","title":"FlightLeg","text":"<p>Represents a single flight segment with airline and timing details.</p>"},{"location":"api/models/#fli.models.google_flights.FlightLeg","title":"<code>fli.models.google_flights.FlightLeg</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>A single flight leg (segment) with airline and timing details.</p>"},{"location":"api/models/#fli.models.google_flights.FlightLeg.airline","title":"<code>airline: Airline</code>  <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.FlightLeg.arrival_airport","title":"<code>arrival_airport: Airport</code>  <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.FlightLeg.arrival_datetime","title":"<code>arrival_datetime: datetime</code>  <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.FlightLeg.departure_airport","title":"<code>departure_airport: Airport</code>  <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.FlightLeg.departure_datetime","title":"<code>departure_datetime: datetime</code>  <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.FlightLeg.duration","title":"<code>duration: PositiveInt</code>  <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.FlightLeg.flight_number","title":"<code>flight_number: str</code>  <code>instance-attribute</code>","text":""},{"location":"api/models/#enums","title":"Enums","text":""},{"location":"api/models/#seattype","title":"SeatType","text":"<p>Available cabin classes for flights.</p>"},{"location":"api/models/#fli.models.google_flights.SeatType","title":"<code>fli.models.google_flights.SeatType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Available cabin classes for flights.</p>"},{"location":"api/models/#fli.models.google_flights.SeatType.BUSINESS","title":"<code>BUSINESS = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.SeatType.ECONOMY","title":"<code>ECONOMY = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.SeatType.FIRST","title":"<code>FIRST = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.SeatType.PREMIUM_ECONOMY","title":"<code>PREMIUM_ECONOMY = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#maxstops","title":"MaxStops","text":"<p>Maximum number of stops allowed in flight search.</p>"},{"location":"api/models/#fli.models.google_flights.MaxStops","title":"<code>fli.models.google_flights.MaxStops</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Maximum number of stops allowed in flight search.</p>"},{"location":"api/models/#fli.models.google_flights.MaxStops.ANY","title":"<code>ANY = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.MaxStops.NON_STOP","title":"<code>NON_STOP = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.MaxStops.ONE_STOP_OR_FEWER","title":"<code>ONE_STOP_OR_FEWER = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.MaxStops.TWO_OR_FEWER_STOPS","title":"<code>TWO_OR_FEWER_STOPS = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#sortby","title":"SortBy","text":"<p>Available sorting options for flight results.</p>"},{"location":"api/models/#fli.models.google_flights.SortBy","title":"<code>fli.models.google_flights.SortBy</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Available sorting options for flight results.</p>"},{"location":"api/models/#fli.models.google_flights.SortBy.ARRIVAL_TIME","title":"<code>ARRIVAL_TIME = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.SortBy.CHEAPEST","title":"<code>CHEAPEST = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.SortBy.DEPARTURE_TIME","title":"<code>DEPARTURE_TIME = 3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.SortBy.DURATION","title":"<code>DURATION = 5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.SortBy.NONE","title":"<code>NONE = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.SortBy.TOP_FLIGHTS","title":"<code>TOP_FLIGHTS = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#support-models","title":"Support Models","text":""},{"location":"api/models/#passengerinfo","title":"PassengerInfo","text":"<p>Configuration for passenger counts.</p>"},{"location":"api/models/#fli.models.google_flights.PassengerInfo","title":"<code>fli.models.google_flights.PassengerInfo</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Passenger configuration for flight search.</p>"},{"location":"api/models/#fli.models.google_flights.PassengerInfo.adults","title":"<code>adults: NonNegativeInt = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.PassengerInfo.children","title":"<code>children: NonNegativeInt = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.PassengerInfo.infants_in_seat","title":"<code>infants_in_seat: NonNegativeInt = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.PassengerInfo.infants_on_lap","title":"<code>infants_on_lap: NonNegativeInt = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#timerestrictions","title":"TimeRestrictions","text":"<p>Time constraints for flight departure and arrival.</p>"},{"location":"api/models/#fli.models.google_flights.TimeRestrictions","title":"<code>fli.models.google_flights.TimeRestrictions</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Time constraints for flight departure and arrival in local time.</p> <p>All times are in hours from midnight (e.g., 20 = 8:00 PM).</p>"},{"location":"api/models/#fli.models.google_flights.TimeRestrictions.earliest_arrival","title":"<code>earliest_arrival: NonNegativeInt | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.TimeRestrictions.earliest_departure","title":"<code>earliest_departure: NonNegativeInt | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.TimeRestrictions.latest_arrival","title":"<code>latest_arrival: PositiveInt | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.TimeRestrictions.latest_departure","title":"<code>latest_departure: PositiveInt | None = None</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#pricelimit","title":"PriceLimit","text":"<p>Price constraints for flight search.</p>"},{"location":"api/models/#fli.models.google_flights.PriceLimit","title":"<code>fli.models.google_flights.PriceLimit</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Maximum price constraint for flight search.</p>"},{"location":"api/models/#fli.models.google_flights.PriceLimit.currency","title":"<code>currency: Currency | None = Currency.USD</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/models/#fli.models.google_flights.PriceLimit.max_price","title":"<code>max_price: PositiveInt</code>  <code>instance-attribute</code>","text":""},{"location":"api/search/","title":"Search API Reference","text":""},{"location":"api/search/#flight-search","title":"Flight Search","text":"<p>The main search functionality for finding specific flights.</p>"},{"location":"api/search/#searchflights","title":"SearchFlights","text":""},{"location":"api/search/#fli.search.flights.SearchFlights","title":"<code>fli.search.flights.SearchFlights()</code>","text":"<p>Flight search implementation using Google Flights' API.</p> <p>This class handles searching for specific flights with detailed filters, parsing the results into structured data models.</p> <p>Currently only supports one-way flights.</p> <p>Initialize the search client for flight searches.</p> Source code in <code>fli/search/flights.py</code> <pre><code>def __init__(self):\n    \"\"\"Initialize the search client for flight searches.\"\"\"\n    self.client = get_client()\n</code></pre>"},{"location":"api/search/#fli.search.flights.SearchFlights.BASE_URL","title":"<code>BASE_URL = 'https://www.google.com/_/FlightsFrontendUi/data/travel.frontend.flights.FlightsFrontendService/GetShoppingResults'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/search/#fli.search.flights.SearchFlights.DEFAULT_HEADERS","title":"<code>DEFAULT_HEADERS = {'content-type': 'application/x-www-form-urlencoded;charset=UTF-8'}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/search/#fli.search.flights.SearchFlights.client","title":"<code>client = get_client()</code>  <code>instance-attribute</code>","text":""},{"location":"api/search/#fli.search.flights.SearchFlights.search","title":"<code>search(filters: SearchFlightsFilters) -&gt; list[FlightResult] | None</code>","text":"<p>Search for flights using the provided filters.</p> PARAMETER DESCRIPTION <code>filters</code> <p>Search parameters including airports, dates, and preferences</p> <p> TYPE: <code>SearchFlightsFilters</code> </p> RETURNS DESCRIPTION <code>list[FlightResult] | None</code> <p>List of FlightResult objects containing flight details, or None if no results</p> RAISES DESCRIPTION <code>Exception</code> <p>If the search fails or returns invalid data</p> Source code in <code>fli/search/flights.py</code> <pre><code>def search(self, filters: SearchFlightsFilters) -&gt; list[FlightResult] | None:\n    \"\"\"Search for flights using the provided filters.\n\n    Args:\n        filters: Search parameters including airports, dates, and preferences\n\n    Returns:\n        List of FlightResult objects containing flight details, or None if no results\n\n    Raises:\n        Exception: If the search fails or returns invalid data\n\n    \"\"\"\n    search_filters = self._create_flight_search_data(filters)\n    encoded_filters = search_filters.encode()\n\n    try:\n        response = self.client.post(\n            url=self.BASE_URL,\n            data=f\"f.req={encoded_filters}\",\n            impersonate=\"chrome\",\n            allow_redirects=True,\n        )\n        response.raise_for_status()\n\n        parsed = json.loads(response.text.lstrip(\")]}'\"))[0][2]\n        if not parsed:\n            return None\n\n        encoded_filters = json.loads(parsed)\n        flights_data = [\n            item\n            for i in [2, 3]\n            if isinstance(encoded_filters[i], list)\n            for item in encoded_filters[i][0]\n        ]\n        flights = [self._parse_flights_data(flight) for flight in flights_data]\n        return flights\n\n    except Exception as e:\n        raise Exception(f\"Search failed: {str(e)}\") from e\n</code></pre>"},{"location":"api/search/#searchflightsfilters","title":"SearchFlightsFilters","text":"<p>A simplified interface for flight search parameters.</p>"},{"location":"api/search/#fli.search.flights.SearchFlightsFilters","title":"<code>fli.search.flights.SearchFlightsFilters</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Simplified search filters for flight searches.</p> <p>This model provides a simpler interface compared to the full FlightSearchFilters, focusing on the most common search parameters.</p> ATTRIBUTE DESCRIPTION <code>departure_airport</code> <p>Origin airport</p> <p> TYPE: <code>Airport</code> </p> <code>arrival_airport</code> <p>Destination airport</p> <p> TYPE: <code>Airport</code> </p> <code>departure_date</code> <p>Date in YYYY-MM-DD format</p> <p> TYPE: <code>str</code> </p> <code>passenger_info</code> <p>Passenger configuration (defaults to 1 adult)</p> <p> TYPE: <code>PassengerInfo</code> </p> <code>seat_type</code> <p>Cabin class (defaults to economy)</p> <p> TYPE: <code>SeatType</code> </p> <code>stops</code> <p>Maximum stops allowed (defaults to any)</p> <p> TYPE: <code>MaxStops</code> </p> <code>sort_by</code> <p>Sort criteria (defaults to cheapest)</p> <p> TYPE: <code>SortBy</code> </p>"},{"location":"api/search/#fli.search.flights.SearchFlightsFilters.arrival_airport","title":"<code>arrival_airport: Airport</code>  <code>instance-attribute</code>","text":""},{"location":"api/search/#fli.search.flights.SearchFlightsFilters.departure_airport","title":"<code>departure_airport: Airport</code>  <code>instance-attribute</code>","text":""},{"location":"api/search/#fli.search.flights.SearchFlightsFilters.departure_date","title":"<code>departure_date: str</code>  <code>instance-attribute</code>","text":""},{"location":"api/search/#fli.search.flights.SearchFlightsFilters.passenger_info","title":"<code>passenger_info: PassengerInfo = PassengerInfo(adults=1)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/search/#fli.search.flights.SearchFlightsFilters.seat_type","title":"<code>seat_type: SeatType = SeatType.ECONOMY</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/search/#fli.search.flights.SearchFlightsFilters.sort_by","title":"<code>sort_by: SortBy = SortBy.CHEAPEST</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/search/#fli.search.flights.SearchFlightsFilters.stops","title":"<code>stops: MaxStops = MaxStops.ANY</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/search/#date-search","title":"Date Search","text":"<p>Search functionality for finding the cheapest dates to fly.</p>"},{"location":"api/search/#searchdates","title":"SearchDates","text":""},{"location":"api/search/#fli.search.dates.SearchDates","title":"<code>fli.search.dates.SearchDates()</code>","text":"<p>Date-based flight search implementation.</p> <p>This class provides methods to search for flight prices across a date range, useful for finding the cheapest dates to fly.</p> <p>Initialize the search client for date-based searches.</p> Source code in <code>fli/search/dates.py</code> <pre><code>def __init__(self):\n    \"\"\"Initialize the search client for date-based searches.\"\"\"\n    self.client = get_client()\n</code></pre>"},{"location":"api/search/#fli.search.dates.SearchDates.BASE_URL","title":"<code>BASE_URL = 'https://www.google.com/_/FlightsFrontendUi/data/travel.frontend.flights.FlightsFrontendService/GetCalendarGrid'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/search/#fli.search.dates.SearchDates.DEFAULT_HEADERS","title":"<code>DEFAULT_HEADERS = {'content-type': 'application/x-www-form-urlencoded;charset=UTF-8'}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/search/#fli.search.dates.SearchDates.client","title":"<code>client = get_client()</code>  <code>instance-attribute</code>","text":""},{"location":"api/search/#fli.search.dates.SearchDates.__parse_price","title":"<code>__parse_price(item: list[list] | list | None) -&gt; float | None</code>  <code>staticmethod</code>","text":"<p>Parse price data from the API response.</p> PARAMETER DESCRIPTION <code>item</code> <p>Raw price data from the API response</p> <p> TYPE: <code>list[list] | list | None</code> </p> RETURNS DESCRIPTION <code>float | None</code> <p>Float price value if valid, None if invalid or missing</p> Source code in <code>fli/search/dates.py</code> <pre><code>@staticmethod\ndef __parse_price(item: list[list] | list | None) -&gt; float | None:\n    \"\"\"Parse price data from the API response.\n\n    Args:\n        item: Raw price data from the API response\n\n    Returns:\n        Float price value if valid, None if invalid or missing\n\n    \"\"\"\n    try:\n        if item and isinstance(item, list) and len(item) &gt; 2:\n            if isinstance(item[2], list) and len(item[2]) &gt; 0:\n                if isinstance(item[2][0], list) and len(item[2][0]) &gt; 1:\n                    return float(item[2][0][1])\n    except (IndexError, TypeError, ValueError):\n        pass\n\n    return None\n</code></pre>"},{"location":"api/search/#fli.search.dates.SearchDates.search","title":"<code>search(filters: DateSearchFilters) -&gt; list[DatePrice] | None</code>","text":"<p>Search for flight prices across a date range and search parameters.</p> PARAMETER DESCRIPTION <code>filters</code> <p>Search parameters including date range, airports, and preferences</p> <p> TYPE: <code>DateSearchFilters</code> </p> RETURNS DESCRIPTION <code>list[DatePrice] | None</code> <p>List of DatePrice objects containing date and price pairs, or None if no results</p> RAISES DESCRIPTION <code>Exception</code> <p>If the search fails or returns invalid data</p> Source code in <code>fli/search/dates.py</code> <pre><code>def search(self, filters: DateSearchFilters) -&gt; list[DatePrice] | None:\n    \"\"\"Search for flight prices across a date range and search parameters.\n\n    Args:\n        filters: Search parameters including date range, airports, and preferences\n\n    Returns:\n        List of DatePrice objects containing date and price pairs, or None if no results\n\n    Raises:\n        Exception: If the search fails or returns invalid data\n\n    \"\"\"\n    encoded_filters = filters.encode()\n\n    try:\n        response = self.client.post(\n            url=self.BASE_URL,\n            data=f\"f.req={encoded_filters}\",\n            impersonate=\"chrome\",\n            allow_redirects=True,\n        )\n        response.raise_for_status()\n        parsed = json.loads(response.text.lstrip(\")]}'\"))[0][2]\n        if not parsed:\n            return None\n\n        data = json.loads(parsed)\n        dates_data = [\n            DatePrice(\n                date=datetime.strptime(item[0], \"%Y-%m-%d\"),\n                price=self.__parse_price(item),\n            )\n            for item in data[-1]\n            if self.__parse_price(item)\n        ]\n        return dates_data\n\n    except Exception as e:\n        raise Exception(f\"Search failed: {str(e)}\") from e\n</code></pre>"},{"location":"api/search/#dateprice","title":"DatePrice","text":""},{"location":"api/search/#fli.search.dates.DatePrice","title":"<code>fli.search.dates.DatePrice</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Flight price for a specific date.</p>"},{"location":"api/search/#fli.search.dates.DatePrice.date","title":"<code>date: datetime</code>  <code>instance-attribute</code>","text":""},{"location":"api/search/#fli.search.dates.DatePrice.price","title":"<code>price: float</code>  <code>instance-attribute</code>","text":""},{"location":"api/search/#examples","title":"Examples","text":""},{"location":"api/search/#basic-flight-search","title":"Basic Flight Search","text":"<pre><code>from fli.search import SearchFlights, SearchFlightsFilters\nfrom fli.models import Airport, SeatType\n\n# Create filters\nfilters = SearchFlightsFilters(\n    departure_airport=Airport.JFK,\n    arrival_airport=Airport.LAX,\n    departure_date=\"2024-06-01\",\n    seat_type=SeatType.ECONOMY\n)\n\n# Search flights\nsearch = SearchFlights()\nresults = search.search(filters)\n</code></pre>"},{"location":"api/search/#date-range-search","title":"Date Range Search","text":"<pre><code>from fli.search import SearchDates\nfrom fli.models import DateSearchFilters, Airport\n\n# Create filters\nfilters = DateSearchFilters(\n    departure_airport=Airport.JFK,\n    arrival_airport=Airport.LAX,\n    from_date=\"2024-06-01\",\n    to_date=\"2024-06-30\"\n)\n\n# Search dates\nsearch = SearchDates()\nresults = search.search(filters)\n</code></pre>"},{"location":"api/search/#http-client","title":"HTTP Client","text":"<p>The underlying HTTP client used for API requests.</p>"},{"location":"api/search/#client","title":"Client","text":""},{"location":"api/search/#fli.search.client.Client","title":"<code>fli.search.client.Client()</code>","text":"<p>HTTP client with built-in rate limiting, retry and user agent impersonation functionality.</p> <p>Initialize a new client session with default headers.</p> Source code in <code>fli/search/client.py</code> <pre><code>def __init__(self):\n    \"\"\"Initialize a new client session with default headers.\"\"\"\n    self._client = requests.Session()\n    self._client.headers.update(self.DEFAULT_HEADERS)\n</code></pre>"},{"location":"api/search/#fli.search.client.Client.DEFAULT_HEADERS","title":"<code>DEFAULT_HEADERS = {'content-type': 'application/x-www-form-urlencoded;charset=UTF-8'}</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api/search/#fli.search.client.Client.__del__","title":"<code>__del__()</code>","text":"<p>Clean up client session on deletion.</p> Source code in <code>fli/search/client.py</code> <pre><code>def __del__(self):\n    \"\"\"Clean up client session on deletion.\"\"\"\n    if hasattr(self, \"_client\"):\n        self._client.close()\n</code></pre>"},{"location":"api/search/#fli.search.client.Client.get","title":"<code>get(url: str, **kwargs) -&gt; requests.Response</code>","text":"<p>Make a rate-limited GET request with automatic retries.</p> PARAMETER DESCRIPTION <code>url</code> <p>Target URL for the request</p> <p> TYPE: <code>str</code> </p> <code>**kwargs</code> <p>Additional arguments passed to requests.get()</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>Response</code> <p>Response object from the server</p> RAISES DESCRIPTION <code>Exception</code> <p>If request fails after all retries</p> Source code in <code>fli/search/client.py</code> <pre><code>@sleep_and_retry\n@limits(calls=10, period=1)\n@retry(stop=stop_after_attempt(3), wait=wait_exponential(), reraise=True)\ndef get(self, url: str, **kwargs) -&gt; requests.Response:\n    \"\"\"Make a rate-limited GET request with automatic retries.\n\n    Args:\n        url: Target URL for the request\n        **kwargs: Additional arguments passed to requests.get()\n\n    Returns:\n        Response object from the server\n\n    Raises:\n        Exception: If request fails after all retries\n\n    \"\"\"\n    try:\n        response = self._client.get(url, **kwargs)\n        response.raise_for_status()\n        return response\n    except Exception as e:\n        raise Exception(f\"GET request failed: {str(e)}\") from e\n</code></pre>"},{"location":"api/search/#fli.search.client.Client.post","title":"<code>post(url: str, **kwargs) -&gt; requests.Response</code>","text":"<p>Make a rate-limited POST request with automatic retries.</p> PARAMETER DESCRIPTION <code>url</code> <p>Target URL for the request</p> <p> TYPE: <code>str</code> </p> <code>**kwargs</code> <p>Additional arguments passed to requests.post()</p> <p> DEFAULT: <code>{}</code> </p> RETURNS DESCRIPTION <code>Response</code> <p>Response object from the server</p> RAISES DESCRIPTION <code>Exception</code> <p>If request fails after all retries</p> Source code in <code>fli/search/client.py</code> <pre><code>@sleep_and_retry\n@limits(calls=10, period=1)\n@retry(stop=stop_after_attempt(3), wait=wait_exponential(), reraise=True)\ndef post(self, url: str, **kwargs) -&gt; requests.Response:\n    \"\"\"Make a rate-limited POST request with automatic retries.\n\n    Args:\n        url: Target URL for the request\n        **kwargs: Additional arguments passed to requests.post()\n\n    Returns:\n        Response object from the server\n\n    Raises:\n        Exception: If request fails after all retries\n\n    \"\"\"\n    try:\n        response = self._client.post(url, **kwargs)\n        response.raise_for_status()\n        return response\n    except Exception as e:\n        raise Exception(f\"POST request failed: {str(e)}\") from e\n</code></pre>"},{"location":"examples/advanced/","title":"Advanced Examples","text":""},{"location":"examples/advanced/#complex-flight-search","title":"Complex Flight Search","text":""},{"location":"examples/advanced/#search-with-multiple-filters","title":"Search with Multiple Filters","text":"<pre><code>from fli.models import (\n    Airport, Airline, SeatType, MaxStops,\n    PassengerInfo, TimeRestrictions, LayoverRestrictions\n)\nfrom fli.search import SearchFlights, SearchFlightsFilters\n\n# Create detailed filters\nfilters = SearchFlightsFilters(\n    departure_airport=Airport.JFK,\n    arrival_airport=Airport.LHR,\n    departure_date=\"2024-06-01\",\n    passenger_info=PassengerInfo(\n        adults=2,\n        children=1,\n        infants_on_lap=1\n    ),\n    seat_type=SeatType.BUSINESS,\n    stops=MaxStops.ONE_STOP_OR_FEWER,\n    airlines=[Airline.BA, Airline.VS],  # British Airways and Virgin Atlantic\n    max_duration=720,  # 12 hours in minutes\n    layover_restrictions=LayoverRestrictions(\n        airports=[Airport.BOS, Airport.ORD],  # Prefer these layover airports\n        max_duration=180  # Maximum 3-hour layover\n    )\n)\n\nsearch = SearchFlights()\nresults = search.search(filters)\n</code></pre>"},{"location":"examples/advanced/#search-with-time-restrictions","title":"Search with Time Restrictions","text":"<pre><code>from fli.models import TimeRestrictions\nfrom fli.search import SearchFlights, SearchFlightsFilters\n\n# Create filters with time restrictions\nfilters = SearchFlightsFilters(\n    departure_airport=Airport.JFK,\n    arrival_airport=Airport.LAX,\n    departure_date=\"2024-06-01\",\n    flight_segments=[\n        FlightSegment(\n            departure_airport=[[Airport.JFK, 0]],\n            arrival_airport=[[Airport.LAX, 0]],\n            travel_date=\"2024-06-01\",\n            time_restrictions=TimeRestrictions(\n                earliest_departure=6,  # 6 AM\n                latest_departure=10,  # 10 AM\n                earliest_arrival=12,  # 12 PM\n                latest_arrival=18  # 6 PM\n            )\n        )\n    ]\n)\n\nsearch = SearchFlights()\nresults = search.search(filters)\n</code></pre>"},{"location":"examples/advanced/#advanced-date-search","title":"Advanced Date Search","text":""},{"location":"examples/advanced/#search-with-day-preferences","title":"Search with Day Preferences","text":"<pre><code>from datetime import datetime, timedelta\nfrom fli.models import DateSearchFilters, Airport, SeatType\n\n# Create filters for weekends only\nfilters = DateSearchFilters(\n    departure_airport=Airport.JFK,\n    arrival_airport=Airport.LAX,\n    from_date=\"2024-06-01\",\n    to_date=\"2024-06-30\",\n    seat_type=SeatType.PREMIUM_ECONOMY\n)\n\nsearch = SearchDates()\nresults = search.search(filters)\n\n# Filter for weekends only\nweekend_results = [\n    r for r in results\n    if r.date.weekday() &gt;= 5  # Saturday = 5, Sunday = 6\n]\n</code></pre>"},{"location":"examples/advanced/#price-tracking-over-time","title":"Price Tracking Over Time","text":"<pre><code>import time\nfrom fli.models import DateSearchFilters, Airport\nfrom fli.search import SearchDates\n\n\ndef track_prices(days=7):\n    filters = DateSearchFilters(\n        departure_airport=Airport.JFK,\n        arrival_airport=Airport.LAX,\n        from_date=\"2024-06-01\",\n        to_date=\"2024-06-07\"\n    )\n\n    search = SearchDates()\n    price_history = {}\n\n    for _ in range(days):\n        results = search.search(filters)\n\n        # Store prices\n        for result in results:\n            date_str = result.date.strftime(\"%Y-%m-%d\")\n            if date_str not in price_history:\n                price_history[date_str] = []\n            price_history[date_str].append(result.price)\n\n        # Wait for next check\n        time.sleep(86400)  # Wait 24 hours\n\n    return price_history\n</code></pre>"},{"location":"examples/advanced/#error-handling","title":"Error Handling","text":""},{"location":"examples/advanced/#handling-rate-limits-and-retries","title":"Handling Rate Limits and Retries","text":"<pre><code>from fli.search import SearchFlights, SearchFlightsFilters\nfrom tenacity import retry, stop_after_attempt, wait_exponential\n\n\n@retry(stop=stop_after_attempt(5), wait=wait_exponential(multiplier=1, min=4, max=60))\ndef search_with_retry(filters: SearchFlightsFilters):\n    search = SearchFlights()\n    try:\n        results = search.search(filters)\n        if not results:\n            raise ValueError(\"No results found\")\n        return results\n    except Exception as e:\n        print(f\"Search failed: {str(e)}\")\n        raise  # Retry will handle this\n</code></pre>"},{"location":"examples/advanced/#working-with-results","title":"Working with Results","text":""},{"location":"examples/advanced/#custom-result-processing","title":"Custom Result Processing","text":"<pre><code>from fli.models import FlightResult\nfrom typing import List\nimport pandas as pd\n\n\ndef analyze_results(results: List[FlightResult]) -&gt; pd.DataFrame:\n    \"\"\"Convert results to pandas DataFrame for analysis.\"\"\"\n    flights_data = []\n\n    for flight in results:\n        for leg in flight.legs:\n            flights_data.append({\n                'price': flight.price,\n                'total_duration': flight.duration,\n                'stops': flight.stops,\n                'airline': leg.airline.value,\n                'flight_number': leg.flight_number,\n                'departure_airport': leg.departure_airport.value,\n                'arrival_airport': leg.arrival_airport.value,\n                'departure_time': leg.departure_datetime,\n                'arrival_time': leg.arrival_datetime,\n                'leg_duration': leg.duration\n            })\n\n    return pd.DataFrame(flights_data)\n</code></pre>"},{"location":"guides/quickstart/","title":"Quick Start Guide","text":"<p>This guide will help you get started with Fli quickly.</p>"},{"location":"guides/quickstart/#installation","title":"Installation","text":""},{"location":"guides/quickstart/#for-python-usage","title":"For Python Usage","text":"<pre><code>pip install flights\n</code></pre>"},{"location":"guides/quickstart/#for-cli-and-gui-usage","title":"For CLI and GUI Usage","text":"<pre><code>pipx install flights\n</code></pre>"},{"location":"guides/quickstart/#basic-usage","title":"Basic Usage","text":""},{"location":"guides/quickstart/#application-gui","title":"Application (GUI)","text":"<pre><code>fli app\n</code></pre> <p>This will launch the Streamlit application at http://localhost:3600.</p>"},{"location":"guides/quickstart/#command-line-interface","title":"Command Line Interface","text":"<ol> <li>Search for flights on a specific date:</li> </ol> <pre><code>fli search JFK LHR 2024-06-01\n</code></pre> <ol> <li>Search with filters:</li> </ol> <pre><code>fli search JFK LHR 2024-06-01 \\\n    -t 6-20 \\              # Time range (6 AM - 8 PM)\n    -a BA KL \\             # Airlines (British Airways, KLM)\n    -s BUSINESS \\          # Seat type\n    -x NON_STOP           # Non-stop flights only\n</code></pre> <ol> <li>Find cheapest dates:</li> </ol> <pre><code>fli cheap JFK LHR --from 2024-06-01 --to 2024-06-30\n</code></pre>"},{"location":"guides/quickstart/#python-api","title":"Python API","text":"<ol> <li>Basic Flight Search:</li> </ol> <pre><code>from fli.search import SearchFlights, SearchFlightsFilters\nfrom fli.models import Airport, SeatType\n\n# Create filters\nfilters = SearchFlightsFilters(\n    departure_airport=Airport.JFK,\n    arrival_airport=Airport.LAX,\n    departure_date=\"2024-06-01\",\n    seat_type=SeatType.ECONOMY\n)\n\n# Search flights\nsearch = SearchFlights()\nresults = search.search(filters)\n\n# Process results\nfor flight in results:\n    print(f\"Price: ${flight.price}\")\n    print(f\"Duration: {flight.duration} minutes\")\n    for leg in flight.legs:\n        print(f\"Flight: {leg.airline.value} {leg.flight_number}\")\n</code></pre> <ol> <li>Date Range Search:</li> </ol> <pre><code>from fli.search import SearchDates\nfrom fli.models import DateSearchFilters, Airport\n\n# Create filters\nfilters = DateSearchFilters(\n    departure_airport=Airport.JFK,\n    arrival_airport=Airport.LAX,\n    from_date=\"2024-06-01\",\n    to_date=\"2024-06-30\"\n)\n\n# Search dates\nsearch = SearchDates()\nresults = search.search(filters)\n\n# Process results\nfor date_price in results:\n    print(f\"Date: {date_price.date}, Price: ${date_price.price}\")\n</code></pre>"},{"location":"guides/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Check out the API Reference for detailed documentation</li> <li>See Advanced Examples for more complex use cases</li> <li>Read about Rate Limiting and Error Handling </li> </ul>"}]}